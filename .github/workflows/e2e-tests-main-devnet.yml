---
name: e2e-tests-main-devnet

on:
  pull_request:
    branches:
      - main
      - 'release-*'
  push:
    branches:
      - main
      - 'release-*'
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build-new-node:
    name: Build node and runtime artifacts (PR version)
    uses: ./.github/workflows/build-node-and-runtime.yml
    secrets: inherit

  build-test-docker:
    needs: [build-new-node]
    name: Build docker image with the test node artifact
    runs-on: self-hosted
    steps:
      - name: Checkout Source code
        uses: actions/checkout@v2

      - name: Download test artifact
        uses: actions/download-artifact@v2
        with:
          name: aleph-test-node
          path: target/release/

      - name: Build test docker image
        id: build-image
        run: |
          chmod +x target/release/aleph-node
          docker build --tag aleph-node:latest -f ./docker/Dockerfile .
          docker save -o aleph-node.tar aleph-node:latest

      - name: Upload test docker image
        uses: actions/upload-artifact@v2
        with:
          name: aleph-test-docker
          path: aleph-node.tar
          if-no-files-found: error
          retention-days: 7

  build-cliain-image:
    name: Build docker image for cliain
    runs-on: self-hosted
    env:
      RUSTC_WRAPPER: sccache
    steps:
      - name: GIT | Checkout source code
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1

      - name: Cargo | Build release binary
        run: |
          cd bin/cliain && cargo build --release

      - name: Build docker image
        run: |
          cd bin/cliain
          docker build --tag cliain:latest -f ./Dockerfile .
          docker save -o cliain.tar cliain:latest

      - name: Upload test docker image
        uses: actions/upload-artifact@v2
        with:
          name: cliain-docker
          path: ./bin/cliain/cliain.tar
          if-no-files-found: error
          retention-days: 7

  check-determinism:
    needs: [build-new-node]
    name: Verify runtime build determinism
    runs-on: self-hosted
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
    steps:
      - name: Checkout Source code
        uses: actions/checkout@v2

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1

      - name: Install WASM target
        run: rustup target add wasm32-unknown-unknown

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: aleph-release-runtime

      - name: Build runtime and compare checksum with artifact
        env:
          ARTIFACT: aleph_runtime.compact.wasm
          TARGET_DIR: target/production/wbuild/aleph-runtime
        run: |
          mkdir -p "$TARGET_DIR"
          mv "$ARTIFACT" "$TARGET_DIR"
          sha256sum "$TARGET_DIR/$ARTIFACT" > checksum.sha256
          cargo clean
          cargo build --profile production -p aleph-runtime
          sha256sum -c checksum.sha256

  build-test-client:
    name: Build e2e test client suite
    runs-on: self-hosted
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
    steps:
      - name: Checkout Source code
        uses: actions/checkout@v2

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1

      - name: Build binary and docker image
        run: |
          cd e2e-tests/
          rm -f target/release/deps/aleph_e2e_client*
          cp $(cargo test --no-run --release --message-format=json | jq -r .executable | \
            grep aleph_e2e_client) target/release/aleph-e2e-client
          docker build --tag aleph-e2e-client:latest -f Dockerfile .
          docker save -o aleph-e2e-client.tar aleph-e2e-client:latest

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: aleph-e2e-client
          path: e2e-tests/aleph-e2e-client.tar
          if-no-files-found: error
          retention-days: 7

  run-aleph-client-subxt-codegen-check:
    needs: [build-test-docker]
    name: Checks if runtime file in aleph-client is up-to-date
    # disabling this check as it causes troubles
    # this should be reworked to sth like
    # https://github.com/paritytech/subxt/blob/master/examples/examples/metadata_compatibility.rs
    if: false
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run one node in the background
        uses: ./.github/actions/run-e2e-test
        with:
          node-count: 1
          min-validator-count: 1

      - name: check if runtime metadata matches
        run: |
          cd aleph-client
          docker pull public.ecr.aws/p6e8q1z1/subxt-client-integration:latest
          docker run --rm --network host \
            --mount type=bind,source="$(pwd)/..",target=/subxt/aleph-node \
            public.ecr.aws/p6e8q1z1/subxt-client-integration:latest

  run-e2e-finalization-test:
    needs: [build-test-docker, build-test-client]
    name: Run e2e finalization test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: finalization::finalization
        timeout-minutes: 2


  run-e2e-rewards-disable-node-test:
    needs: [build-test-docker, build-test-client]
    name: Run e2e reward points - disable node test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: rewards::disable_node
          follow-up-finalization-check: true
        timeout-minutes: 15


  run-e2e-token-transfer-test:
    needs: [build-test-docker, build-test-client]
    name: Run e2e token transfer test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: token_transfer
        timeout-minutes: 3


  run-e2e-channeling-fee-test:
    needs: [build-test-docker, build-test-client]
    name: Run e2e channeling fee test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: channeling_fee_and_tip
        timeout-minutes: 4

  run-e2e-treasury-access-test:
    needs: [build-test-docker, build-test-client]
    name: Run e2e treasury access test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: treasury_access
        timeout-minutes: 4


  run-e2e-batch-transactions-test:
    needs: [build-test-docker, build-test-client]
    name: Run e2e batch transactions test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: batch_transactions
        timeout-minutes: 4


  run-e2e-staking-era-payouts-test:
    needs: [build-test-docker, build-test-client]
    name: Run e2e staking era payouts test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: staking_era_payouts
          follow-up-finalization-check: true
        timeout-minutes: 15


  run-e2e-staking-new-validator-test:
    needs: [build-test-docker, build-test-client]
    name: Run e2e staking new validator test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: staking_new_validator
          follow-up-finalization-check: true
        timeout-minutes: 10


  run-e2e-change-validators-test:
    needs: [build-test-docker, build-test-client]
    name: Run e2e change validators test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: change_validators
          follow-up-finalization-check: true
        timeout-minutes: 3

  run-e2e-validators-rotate:
    needs: [build-test-docker, build-test-client]
    name: Run validators rotation test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: validators_rotate
          follow-up-finalization-check: true
        timeout-minutes: 10

  run-e2e-era-payout:
    needs: [build-test-docker, build-test-client]
    name: Run era payout test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: era_payout::era_payout
          follow-up-finalization-check: true
        timeout-minutes: 10

  run-e2e-era-validators:
    needs: [build-test-docker, build-test-client]
    name: Run era validators test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: era_validators
          follow-up-finalization-check: true
        timeout-minutes: 10

  run-e2e-rewards-force-new-era:
    needs: [build-test-docker, build-test-client]
    name: Run force new era test to check rewards
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: rewards::force_new_era
          follow-up-finalization-check: true
        timeout-minutes: 10

  run-e2e-rewards-stake-change:
    needs: [build-test-docker, build-test-client]
    name: Run reward points with stake changed test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: rewards::points_stake_change
          follow-up-finalization-check: true
        timeout-minutes: 10

  run-e2e-rewards-change-stake-force-new-era:
    needs: [build-test-docker, build-test-client]
    name: Run reward points with stake changed and new era forced test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: rewards::change_stake_and_force_new_era
          follow-up-finalization-check: true
        timeout-minutes: 10

  run-e2e-rewards-points-basic:
    needs: [build-test-docker, build-test-client]
    name: Run basic reward points calculation test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: points_basic
          follow-up-finalization-check: true
        timeout-minutes: 10

  run-e2e-authorities-are-staking:
    needs: [build-test-docker, build-test-client]
    name: Run authorities are staking test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: authorities_are_staking
          node-count: 6
          reserved-seats: 3
          non-reserved-seats: 3
          follow-up-finalization-check: true
        timeout-minutes: 15

  run-e2e-ban-automatic:
    needs: [build-test-docker, build-test-client]
    name: Run ban automatic test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: ban_automatic
          follow-up-finalization-check: true
        timeout-minutes: 15

  run-e2e-ban-manual:
    needs: [build-test-docker, build-test-client]
    name: Run ban manual test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: ban_manual
          follow-up-finalization-check: true
        timeout-minutes: 15

  run-e2e-ban-counter-clearing:
    needs: [build-test-docker, build-test-client]
    name: Run ban counter clearing test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: clearing_session_count
          follow-up-finalization-check: true
        timeout-minutes: 15

  run-e2e-ban-threshold:
    needs: [build-test-docker, build-test-client]
    name: Run ban threshold test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: ban_threshold
          follow-up-finalization-check: true
        timeout-minutes: 15

  run-e2e-permissionless-ban:
    needs: [build-test-docker, build-test-client]
    name: Run permissionless ban test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: permissionless_ban
          follow-up-finalization-check: true
        timeout-minutes: 15

  run-e2e-version-upgrade:
    needs: [build-test-docker, build-test-client]
    name: Run basic (positive) version-upgrade test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: finality_version::schedule_version_change
        env:
          UPGRADE_VERSION: 1
          UPGRADE_SESSION: 3
          UPGRADE_FINALIZATION_WAIT_SESSIONS: 2
        timeout-minutes: 10

  run-e2e-adder-contract-test:
    needs: [build-test-docker, build-test-client]
    name: Run e2e adder contract test
    runs-on: self-hosted
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1

      - name: Install rust-src
        working-directory: ./contracts
        run: rustup component add rust-src

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          deploy-adder: true
          test-case: adder
        timeout-minutes: 10

  run-e2e-finality-version-change:
    needs: [build-test-docker, build-test-client]
    name: Run finality version change test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: finality_version::finality_version_change
          follow-up-finalization-check: true
        timeout-minutes: 10

  check-e2e-test-suite-completion:
    needs: [
      run-e2e-finalization-test,
      run-e2e-rewards-disable-node-test,
      run-e2e-token-transfer-test,
      run-e2e-channeling-fee-test,
      run-e2e-treasury-access-test,
      run-e2e-batch-transactions-test,
      run-e2e-staking-era-payouts-test,
      run-e2e-staking-new-validator-test,
      run-e2e-change-validators-test,
      run-e2e-validators-rotate,
      run-e2e-era-payout,
      run-e2e-era-validators,
      run-e2e-rewards-force-new-era,
      run-e2e-rewards-stake-change,
      run-e2e-rewards-change-stake-force-new-era,
      run-e2e-rewards-points-basic,
      run-e2e-authorities-are-staking,
      run-e2e-ban-automatic,
      run-e2e-ban-manual,
      run-e2e-ban-counter-clearing,
      run-e2e-ban-threshold,
      run-e2e-version-upgrade,
      run-e2e-permissionless-ban,
      run-e2e-adder-contract-test,
#      run-e2e-failing-version-upgrade,
#      run-e2e-version-upgrade-catchup,
      run-e2e-finality-version-change,
    ]
    name: Check e2e test suite completion
    runs-on: ubuntu-20.04
    steps:
      - name: All e2e tests completed
        run: echo "All e2e tests completed."


  push-image:
    needs: [check-e2e-test-suite-completion]
    name: Push node image to the ECR
    if: github.event_name == 'push'
    runs-on: ubuntu-20.04
    steps:
      - name: GIT | Checkout Source code
        uses: actions/checkout@v2

      # get the release binary, build docker image
      - name: Download release artifact
        uses: actions/download-artifact@v2
        with:
          name: aleph-release-node
          path: target/release/

      - name: Build docker image
        id: build-image
        run: |
          chmod +x target/release/aleph-node
          docker build --tag aleph-node:latest -f ./docker/Dockerfile .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Public Amazon ECR
        id: login-public-ecr
        uses: docker/login-action@v2
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: GIT | Get branch info & current commit sha.
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF##*/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Push aleph-node Current Image to Public ECR
        env:
          CURRENT_IMAGE: aleph-node
          ECR_PUSH_IMAGE: public.ecr.aws/p6e8q1z1/aleph-node
        run: |
          docker tag ${{ env.CURRENT_IMAGE }} \
            ${{ env.ECR_PUSH_IMAGE }}:${{ steps.vars.outputs.sha_short }}
          docker tag ${{ env.CURRENT_IMAGE }} ${{ env.ECR_PUSH_IMAGE }}:latest
          docker push ${{ env.ECR_PUSH_IMAGE }}:${{ steps.vars.outputs.sha_short }}
          docker push ${{ env.ECR_PUSH_IMAGE }}:latest

  test-catch-up:
    name: Test catching up
    if: false
    runs-on: ubuntu-20.04
    needs: build-new-node
    strategy:
      matrix:
        pruning: ['', '--state-pruning 90']
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: local-tests/

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Test catch up
        timeout-minutes: 10
        env:
          # Relative to local-tests/ directory
          ALEPH_NODE_BINARY: aleph-test-node/aleph-node
        run: ./.github/scripts/test_catch_up.sh ${{ matrix.pruning }}

  test-multiple-restarts:
    name: Test multiple restarts
    if: false
    runs-on: ubuntu-20.04
    needs: build-new-node
    strategy:
      matrix:
        pruning: ['', '--state-pruning 2048']
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: local-tests/

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Test multiple restarts
        timeout-minutes: 10
        env:
          # Relative to local-tests/ directory
          ALEPH_NODE_BINARY: aleph-release-node/aleph-node
        run: ./.github/scripts/test_multiple_restarts.sh ${{ matrix.pruning }}

  check-runtime-change:
    name: Inspect whether runtime version has been changed (compared with main)
    runs-on: ubuntu-20.04
    outputs:
      runtime-updated: ${{ steps.inspect.outputs.diff }}
    steps:
      - name: Checkout current and old source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Inspect versions
        id: inspect
        run: |
          if [ ! $(git diff HEAD origin/main -- bin/runtime/src/lib.rs | grep ' spec_version: ') ]
          then
            echo "::set-output name=diff::0"
          else
            echo "::set-output name=diff::1"
          fi

  build-new-runtime-and-try_runtime:
    name: Build new runtime and try_runtime tool
    needs: [check-runtime-change]
    # Disbled check, reenable once we fix the issue with try-runtime test
    # if: ${{ needs.check-runtime-change.outputs.runtime-updated != 0 }}
    if: ${{ false }}
    runs-on: self-hosted
    env:
      RUSTC_WRAPPER: sccache
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1

      - name: Install WASM target
        run: rustup target add wasm32-unknown-unknown

      - name: Build try-runtime
        run: cargo build --release -p aleph-node --features "try-runtime"

      - name: Build runtime
        run: cargo build --release -p aleph-runtime --features "try-runtime"

      - name: Upload try-runtime
        uses: actions/upload-artifact@v3
        with:
          name: try_runtime
          path: target/release/aleph-node
          if-no-files-found: error
          retention-days: 7

      - name: Upload new runtime
        uses: actions/upload-artifact@v3
        with:
          name: aleph-runtime-try_runtime
          path: target/release/wbuild/aleph-runtime/aleph_runtime.compact.wasm
          if-no-files-found: error
          retention-days: 7

  test-runtime-update:
    name: Test runtime update with try-runtime tool
    runs-on: self-hosted
    needs: [build-new-runtime-and-try_runtime]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: local-tests/

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Test update
        timeout-minutes: 20
        env:
          NEW_RUNTIME: aleph-runtime-try_runtime/aleph_runtime.compact.wasm
          TRY_RUNTIME: try_runtime/aleph-node
        working-directory: local-tests/
        run: |
          chmod +x ${{ env.TRY_RUNTIME }}
          pip install -r requirements.txt
          ./test_runtime_update.py \
              wss://ws.test.azero.dev:443 \
              ../bin/node/src/resources/testnet_chainspec.json \
              ${{ env.NEW_RUNTIME }} \
              ${{ env.TRY_RUNTIME }}

  slack:
    name: Slack notification
    runs-on: ubuntu-20.04
    needs: [push-image]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Send Slack message
        uses: ./.github/actions/slack-notification
        with:
          notify-on: "failure"
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

