---
name: Deploy to Mainnet

on:
  release:
    types: [released]

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}

jobs:
  deploy-mainnet:
    name: Deploy new aleph-node image to Mainnet EKS
    runs-on: ubuntu-20.04
    environment: 'mainnet'
    env:
      AWS_REGION: us-east-1  # this region is used by all public ECR repos
    steps:
      - name: GIT | Checkout
        uses: actions/checkout@v2

      - name: GIT | Get branch info & current commit sha.
        id: vars
        shell: bash
        run: |
          echo "branch=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Public Amazon ECR
        id: login-public-ecr
        uses: docker/login-action@v2
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: Verify aleph-node image existance
        env:
          IMAGE: public.ecr.aws/p6e8q1z1/aleph-node:${{ steps.vars.outputs.branch }}
        run: |
          export image_not_exist=$(docker manifest inspect ${{ env.IMAGE }} &> /dev/null ; echo $?)
          if [ $image_not_exist -eq 1 ]; then
            echo "::error title=Wrong docker image tag::Docker image ${{ env.IMAGE }} doesn't exist"
            exit 1
          fi

      - name: Login to Docker Hub
        id: login-docker-hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Tag and push image of Mainnet to DockerHub
        env:
          MAINNET_IMAGE: public.ecr.aws/p6e8q1z1/aleph-node:${{ steps.vars.outputs.branch }}
          DOCKERHUB_MAINNET_IMAGE:
            cardinalcryptography/aleph-zero:mainnet-${{ steps.vars.outputs.branch }}
          DOCKERHUB_MAINNET_LATEST_IMAGE: cardinalcryptography/aleph-zero:mainnet-latest
        run: |
          echo "FROM ${{ env.MAINNET_IMAGE }}" > Dockerfile.dockerhub
          echo 'ENTRYPOINT ["/usr/local/bin/aleph-node"]' >> Dockerfile.dockerhub
          docker build -t ${{ env.DOCKERHUB_MAINNET_IMAGE }} -f Dockerfile.dockerhub .
          docker tag ${{ env.DOCKERHUB_MAINNET_IMAGE }} ${{ env.DOCKERHUB_MAINNET_LATEST_IMAGE }}
          docker push ${{ env.DOCKERHUB_MAINNET_IMAGE }}
          docker push ${{ env.DOCKERHUB_MAINNET_LATEST_IMAGE }}

      - name: S3 CI | Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        env:
          AWS_REGION: us-east-1
        with:
          aws-access-key-id: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: S3 CI | Download release runtime from S3 bucket
        shell: bash
        env:
          # yamllint disable-line rule:line-length
          S3BUCKET_URL: s3://${{ secrets.CI_MAINNET_S3BUCKET_NAME }}/builds/aleph-node/commits/${{ steps.vars.outputs.sha_short }}/aleph-runtime
          S3BUCKET_FILE: aleph-runtime-${{ steps.vars.outputs.sha_short }}.tar.gz
        run: |
          aws s3 cp ${{ env.S3BUCKET_URL }}/${{ S3BUCKET_FILE }} ${{ env.S3BUCKET_FILE }}

      - name: RELEASE ASSET | Add runtime to the release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            aleph-runtime-${{ steps.vars.outputs.sha_short }}.tar.gz

      - name: GIT | Checkout aleph-apps repo
        uses: actions/checkout@master
        with:
          ref: mainnet
          repository: Cardinal-Cryptography/aleph-apps
          token: ${{ secrets.CI_GH_TOKEN }}
          path: "aleph-apps"

      - name: Init kustomize
        uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: "3.8.6"

      - name: Update aleph-node docker image and trigger ArgoCD deploy for Mainnet
        env:
          MAINNET_IMAGE: public.ecr.aws/p6e8q1z1/aleph-node:${{ steps.vars.outputs.branch }}
          REGIONS_AWS: 'eu-central-1,eu-west-1,eu-west-2,us-east-1,us-east-2'
        run: |
          IFS="," read -a region_array <<< ${{ env.REGIONS_AWS }}
          export aleph_path=$(pwd)
          for i in "${region_array[@]}"; do
            # Deploy new image version for archivist
            cd ${aleph_path}/aleph-apps/aleph-node-archivists/overlays/mainnet/${i}
            kustomize edit set image \
              "aleph-node-archivist-image-placeholder=${{ env.MAINNET_IMAGE }}"

            # Deploy new image version for validator
            cd ${aleph_path}/aleph-apps/aleph-node-validators/overlays/mainnet/${i}
            kustomize edit set image \
              "aleph-node-validator-image-placeholder=${{ env.MAINNET_IMAGE }}"
          done

      - name: GIT | Commit changes to aleph-apps repository.
        uses: EndBug/add-and-commit@v5.1.0
        with:
          author_name: AlephZero Automation
          author_email: alephzero@10clouds.com
          message: "Updating Mainnet docker image tag for release: ${{ steps.vars.outputs.branch }}"
          add: "*.yaml"
          cwd: "aleph-apps"
          branch: mainnet
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GH_TOKEN }}

  slack:
    name: Slack notification
    runs-on: ubuntu-20.04
    needs: [deploy-mainnet]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Send Slack message
        uses: ./.github/actions/slack-notification
        with:
          notify-on: "always"
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
