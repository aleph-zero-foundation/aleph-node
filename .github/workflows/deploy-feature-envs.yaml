---
name: Deploy Feature Environment

on:
  pull_request:
    types: [labeled, closed]

env:
  LABEL_DEPLOY: '[AZERO] DEPLOY-FEATURE-ENV'
  LABEL_DEPLOY_HOT: '[AZERO] DEPLOY-HOT-FEATURE-ENV'
  LABEL_DELETE: '[AZERO] DELETE-FEATURE-ENV'
  LABEL_DESTROYED: 'DESTROYED'
  LABEL_DEPLOYED: 'DEPLOYED'
  LABEL_DEPLOYED_CONTRACTS: 'DEPLOYED-CONTRACTS'
  REGISTRY_HOST: public.ecr.aws
  FE_ALEPHNODE_REGISTRY: public.ecr.aws/p6e8q1z1/feature-env-aleph-node
  FE_ALEPHNODE_REGISTRY_ESCAPED: 'public.ecr.aws\/p6e8q1z1\/feature-env-aleph-node'
  FE_IMAGETAG_PREFIX: 'fe-'
  FE_APP_PREFIX: 'fe-'
  PUBLIC_ALEPHNODE_REGISTRY: public.ecr.aws/p6e8q1z1/aleph-node
  PUBLIC_ALEPHNODE_REGISTRY_ESCAPED: 'public.ecr.aws\/p6e8q1z1\/aleph-node'
  FE_KEYS_S3BUCKET: fe-alephzero-devnet-eu-central-1-keys-bucket
  FE_KEYS_S3PATH_PREFIX: 'fe-'
  RPC_TESTNET_URL: https://rpc.test.azero.dev
  WSS_TESTNET_URL: wss://ws.test.azero.dev
  RPC_MAINNET_URL: https://rpc.azero.dev
  FORKOFF_IMAGE: public.ecr.aws/p6e8q1z1/fork-off:latest

jobs:
  ## After that job run, artefact with aleph-node is created with name: aleph-release-node
  build_aleph_node_binary:
    if: >
      (github.event.label.name == '[AZERO] DEPLOY-FEATURE-ENV') ||
      (github.event.label.name == '[AZERO] DEPLOY-HOT-FEATURE-ENV')
    name: Build production artifacts
    uses: ./.github/workflows/_build-production-node-and-runtime.yml
    secrets: inherit

  push_pr_image:
    if: >
      (github.event.label.name == '[AZERO] DEPLOY-FEATURE-ENV') ||
      (github.event.label.name == '[AZERO] DEPLOY-HOT-FEATURE-ENV')
    needs: [build_aleph_node_binary]
    name: Build, prepare and push aleph-node image from PR to ECR
    runs-on: ubuntu-20.04
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Get branch name and commit SHA
        id: get_branch
        uses: ./.github/actions/get-branch

      - name: Download artifact with built aleph-node binary from PR
        uses: actions/download-artifact@v3
        with:
          name: aleph-release-node
          path: target/release/

      - name: Build docker image with PR aleph-node binary
        env:
          IMAGE_TAG:
            ${{ env.FE_IMAGETAG_PREFIX }}${{ steps.get_branch.outputs.branch_imagetag_full }}
        run: |
          chmod +x target/release/aleph-node
          ls -alh target/release/
          ls -alh ./docker/
          docker build --tag ${{ env.FE_ALEPHNODE_REGISTRY }}:${{ env.IMAGE_TAG }} \
            -f ./docker/Dockerfile .

      - name: Login to ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}

      - name: Push FE aleph-node image to the feature-env-aleph-node registry
        env:
          IMAGE_TAG:
            ${{ env.FE_IMAGETAG_PREFIX }}${{ steps.get_branch.outputs.branch_imagetag_full }}
        run: |
          docker push ${{ env.FE_ALEPHNODE_REGISTRY }}:${{ env.IMAGE_TAG }}


  deploy_feature_env:
    if: >
      (github.event.label.name == '[AZERO] DEPLOY-FEATURE-ENV') ||
      (github.event.label.name == '[AZERO] DEPLOY-HOT-FEATURE-ENV')
    name: Deploy feature environment based on the PR
    runs-on: ubuntu-20.04
    outputs:
      deployment-id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Delete old FE when redeploying
        if: contains( github.event.pull_request.labels.*.name, env.LABEL_DEPLOYED)
        uses: ./.github/actions/destroy-feature-environment
        with:
          gh-ci-token: ${{ secrets.CI_GH_TOKEN }}
          aws-access-key: ${{ secrets.AWS_DEVNET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEVNET_SECRET_ACCESS_KEY }}
          argo-sync-user-token: ${{ secrets.ARGO_SYNC_USER_TOKEN }}

      - name: Get branch name and commit SHA
        id: get_branch
        uses: ./.github/actions/get-branch

      - name: Start Feature Env Deployment
        uses: bobheadxi/deployments@v1.1.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.CI_GH_TOKEN }}
          env: ${{ steps.get_branch.outputs.branch_name }}
          ref: ${{ github.head_ref }}
          override: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        env:
          AWS_REGION: us-east-1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEVNET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEVNET_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Public Amazon ECR
        id: login-public-ecr
        uses: docker/login-action@v2
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: Build chainspec for testnet FE and send it to S3
        if: contains( github.event.pull_request.labels.*.name, env.LABEL_DEPLOY)
        env:
          BRANCH_NAME: ${{ steps.get_branch.outputs.branch_name }}
          CHAIN_ID: a0fenet
        # yamllint disable rule:line-length
        run: |
          COMMIT_ID=$(curl -s -H "Content-Type: application/json" \
            -d '{"id":1, "jsonrpc":"2.0", "method": "system_version"}' ${{ env.RPC_TESTNET_URL }} \
            | jq -r '.result' | cut -d "-" -f 2 | head -c 7)
          echo $COMMIT_ID
          TESTNET_IMAGE="${{ env.PUBLIC_ALEPHNODE_REGISTRY }}:$COMMIT_ID"

          # sync all validator's keystores from S3
          aws s3 cp s3://${{ env.FE_KEYS_S3BUCKET }}/data data --recursive

          # rename validator paths
          declare -A \
            NAMES=([aleph-node-validator-0]=5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY \
            [aleph-node-validator-1]=5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty \
            [aleph-node-validator-2]=5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y \
            [aleph-node-validator-3]=5DAAnrj7VHTznn2AWBemMuyBwZWs6FNFjdyVXUeYum3PTXFy \
            [aleph-node-validator-4]=5HGjWAeFDfFCWPsjFQdVV2Msvz2XtMktvgocEZcCj68kUMaw)

          for NAME in "${!NAMES[@]}"; do
            mv -v data/$NAME data/${NAMES[$NAME]}
          done

          # Generate chainspec skeleton, it will reuse keys from the synced keystore
          docker run -v $(pwd)/data:/data --env RUST_BACKTRACE=1 \
            --entrypoint "/usr/local/bin/aleph-node" $TESTNET_IMAGE bootstrap-chain --raw \
            --base-path /data --chain-id $CHAIN_ID \
            --account-ids 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY,5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty,5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y,5DAAnrj7VHTznn2AWBemMuyBwZWs6FNFjdyVXUeYum3PTXFy,5HGjWAeFDfFCWPsjFQdVV2Msvz2XtMktvgocEZcCj68kUMaw \
            --sudo-account-id 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY \
            --faucet-account-id 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY > chainspec.json

          aws s3 cp chainspec.json \
            s3://${{ env.FE_KEYS_S3BUCKET }}/${{ env.FE_KEYS_S3PATH_PREFIX }}${{ env.BRANCH_NAME }}/chainspec.json
          aws s3 cp \
            s3://${{ env.FE_KEYS_S3BUCKET }}/data/ \
            s3://${{ env.FE_KEYS_S3BUCKET }}/${{ env.FE_KEYS_S3PATH_PREFIX }}${{ env.BRANCH_NAME }}/data/ \
            --recursive
        # yamllint enable rule:line-length

      - name: Build chainspec for Hotnet FE and send it to S3
        if: contains( github.event.pull_request.labels.*.name, env.LABEL_DEPLOY_HOT)
        env:
          BRANCH_NAME: ${{ steps.get_branch.outputs.branch_name }}
          CHAIN_ID: a0fenet
        # yamllint disable rule:line-length
        run: |
          SYSTEM_VERSION=$(curl -s -H "Content-Type: application/json" \
            -d '{"id":1, "jsonrpc":"2.0", "method": "system_version"}' ${{ env.RPC_MAINNET_URL }} \
            | jq -r '.result')
          SUFFIX="-x86_64-linux-gnu"
          LONG_COMMIT_ID=${SYSTEM_VERSION/%$SUFFIX}
          COMMIT_ID=${LONG_COMMIT_ID: -7}
          echo $COMMIT_ID
          MAINNET_IMAGE="${{ env.PUBLIC_ALEPHNODE_REGISTRY }}:$COMMIT_ID"

          # sync all validator's keystores from S3
          aws s3 cp s3://${{ env.FE_KEYS_S3BUCKET }}/data data --recursive

          # rename validator paths
          declare -A \
            NAMES=([aleph-node-validator-0]=5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY \
            [aleph-node-validator-1]=5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty \
            [aleph-node-validator-2]=5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y \
            [aleph-node-validator-3]=5DAAnrj7VHTznn2AWBemMuyBwZWs6FNFjdyVXUeYum3PTXFy \
            [aleph-node-validator-4]=5HGjWAeFDfFCWPsjFQdVV2Msvz2XtMktvgocEZcCj68kUMaw)

          for NAME in "${!NAMES[@]}"; do
            mv -v data/$NAME data/${NAMES[$NAME]}
          done

          # Generate chainspec skeleton, it will reuse keys from the synced keystore
          docker run -v $(pwd)/data:/data --env RUST_BACKTRACE=1 \
            --entrypoint "/usr/local/bin/aleph-node" $MAINNET_IMAGE bootstrap-chain --raw \
            --base-path /data --chain-id $CHAIN_ID \
            --account-ids 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY,5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty,5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y,5DAAnrj7VHTznn2AWBemMuyBwZWs6FNFjdyVXUeYum3PTXFy,5HGjWAeFDfFCWPsjFQdVV2Msvz2XtMktvgocEZcCj68kUMaw \
            --sudo-account-id 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY > chainspec.json

          # Generate chainspec from skeleton
          # docker run -v $(pwd):/app --env RUST_LOG=info ${{ env.FORKOFF_IMAGE }} --ws-rpc-endpoint=${{ env.RPC_MAINNET_URL }} --initial-spec-path=chainspec.skeleton.json --combined-spec-path=chainspec.json
          aws s3 cp \
            chainspec.json \
            s3://${{ env.FE_KEYS_S3BUCKET }}/${{ env.FE_KEYS_S3PATH_PREFIX }}${{ env.BRANCH_NAME }}/chainspec.json
          aws s3 cp \
            s3://${{ env.FE_KEYS_S3BUCKET }}/data/ \
            s3://${{ env.FE_KEYS_S3BUCKET }}/${{ env.FE_KEYS_S3PATH_PREFIX }}${{ env.BRANCH_NAME }}/data/ \
            --recursive
      # yamllint enable rule:line-length

      - name: GIT | Checkout aleph-apps repo
        uses: actions/checkout@v3
        with:
          repository: Cardinal-Cryptography/aleph-apps
          token: ${{ secrets.CI_GH_TOKEN }}
          path: "aleph-apps"
          ref: main

      - name: Start testnet image on feature environment
        if: contains( github.event.pull_request.labels.*.name, env.LABEL_DEPLOY)
        env:
          BRANCH_NAME: ${{ steps.get_branch.outputs.branch_name }}
          APP_NAME: ${{ env.FE_APP_PREFIX }}${{ steps.get_branch.outputs.branch_appname }}
          NAMESPACE: ${{ env.FE_APP_PREFIX }}${{ steps.get_branch.outputs.branch_appname }}
          CREATE_HOOK: false
        run: |
          # Set up envs
          COMMIT_ID=$(curl -s -H "Content-Type: application/json" \
            -d '{"id":1, "jsonrpc":"2.0", "method": "system_version"}' ${{ env.RPC_TESTNET_URL }} \
            | jq -r '.result' | cut -d "-" -f 2 | head -c 7)
          TESTNET_IMAGE="${{ env.PUBLIC_ALEPHNODE_REGISTRY_ESCAPED }}:$COMMIT_ID"
          ALEPH_PATH=$(pwd)

          # Create application manifest from template

          sed "s/APP_NAME/${{ env.APP_NAME }}/g" \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/app-template/app-template.yaml > \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml

          sed "s/CREATE_HOOK/${{ env.CREATE_HOOK  }}/g" \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml > \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp && \
            mv $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml

          sed "s/NAMESPACE/${{ env.NAMESPACE }}/g" \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml > \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp && \
            mv $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml

          sed "s/NODE_IMAGE/$TESTNET_IMAGE/g" \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml > \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp && \
            mv $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml

      - name: Start mainnet image on feature environment
        if: contains( github.event.pull_request.labels.*.name, env.LABEL_DEPLOY_HOT)
        env:
          BRANCH_NAME: ${{ steps.get_branch.outputs.branch_name }}
          APP_NAME: ${{ env.FE_APP_PREFIX }}${{ steps.get_branch.outputs.branch_appname }}
          NAMESPACE: ${{ env.FE_APP_PREFIX }}${{ steps.get_branch.outputs.branch_appname }}
          CREATE_HOOK: false
        run: |
          # Set up envs
          SYSTEM_VERSION=$(curl -s -H "Content-Type: application/json" \
           -d '{"id":1, "jsonrpc":"2.0", "method": "system_version"}' ${{ env.RPC_MAINNET_URL }} | \
           jq -r '.result')
          SUFFIX="-x86_64-linux-gnu"
          LONG_COMMIT_ID=${SYSTEM_VERSION/%$SUFFIX}
          COMMIT_ID=${LONG_COMMIT_ID: -7}
          MAINNET_IMAGE="${{ env.PUBLIC_ALEPHNODE_REGISTRY_ESCAPED }}:$COMMIT_ID"
          ALEPH_PATH=$(pwd)

          # Create application manifest from template

          sed "s/APP_NAME/${{ env.APP_NAME }}/g" \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/app-template/app-template.yaml > \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml

          sed "s/CREATE_HOOK/${{ env.CREATE_HOOK  }}/g" \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml > \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp && \
            mv $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml

          sed "s/NAMESPACE/${{ env.NAMESPACE }}/g" \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml > \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp && \
            mv $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml

          sed "s/NODE_IMAGE/$MAINNET_IMAGE/g" \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml > \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp && \
            mv $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml

      - name: GIT | Commit changes to aleph-apps repository.
        uses: EndBug/add-and-commit@v9.1.1
        env:
          APP_NAME: ${{ env.FE_APP_PREFIX }}${{ steps.get_branch.outputs.branch_appname }}
        with:
          author_name: AlephZero Automation
          author_email: alephzero@10clouds.com
          message: "New Feature Environment Deployment with name: ${{ env.APP_NAME }}"
          add: "*.yaml"
          cwd: "aleph-apps"

      - name: Refresh Argo and wait for the testnet image deployment to be finished
        env:
          APP_NAME: ${{ env.FE_APP_PREFIX }}${{ steps.get_branch.outputs.branch_appname }}
          ARGOCD_URL: argocd.dev.azero.dev
        run: |
          ## Install argocd CLI tool
          curl -sSL -o argocd \
            https://github.com/argoproj/argo-cd/releases/download/v2.3.3/argocd-linux-amd64
          chmod +x argocd && mv argocd /usr/local/bin/

          ## Sync argo to start deployment
          /usr/local/bin/argocd app get fe-root-application --hard-refresh --auth-token \
            ${{ secrets.ARGO_SYNC_USER_TOKEN }} --server ${{ env.ARGOCD_URL }}

          ## Wait for the app to be deployed
          /usr/local/bin/argocd app wait fe-root-application --auth-token \
            ${{ secrets.ARGO_SYNC_USER_TOKEN }} --server ${{ env.ARGOCD_URL }}
          /usr/local/bin/argocd app wait ${{ env.APP_NAME }} --auth-token \
            ${{ secrets.ARGO_SYNC_USER_TOKEN }} --server ${{ env.ARGOCD_URL }}

      - name: Wait for the testnet aleph-node binary to accept some blocks
        uses: juliangruber/sleep-action@v2.0.0
        with:
          time: 5m

  update_feature_env_image:
    if: >
      (github.event.label.name == '[AZERO] DEPLOY-FEATURE-ENV') ||
      (github.event.label.name == '[AZERO] DEPLOY-HOT-FEATURE-ENV')
    needs: [push_pr_image, deploy_feature_env]
    name: Update feature environment to the latest PR aleph-node image
    runs-on: ubuntu-20.04
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Get branch name and commit SHA
        id: get_branch
        uses: ./.github/actions/get-branch

      - name: GIT | Checkout aleph-apps repo
        uses: actions/checkout@v3
        with:
          repository: Cardinal-Cryptography/aleph-apps
          token: ${{ secrets.CI_GH_TOKEN }}
          path: "aleph-apps"
          ref: main

      - name: Update feature environment to the latest PR image
        env:
          IMAGE_TAG:
            ${{ env.FE_IMAGETAG_PREFIX }}${{ steps.get_branch.outputs.branch_imagetag_full }}
          APP_NAME: ${{ env.FE_APP_PREFIX }}${{ steps.get_branch.outputs.branch_appname }}
          ARGOCD_URL: argocd.dev.azero.dev
          NAMESPACE: ${{ env.FE_APP_PREFIX }}${{ steps.get_branch.outputs.branch_appname }}
          CREATE_HOOK: true
        run: |
          # Set up envs
          PR_IMAGE="${{ env.FE_ALEPHNODE_REGISTRY_ESCAPED }}\:${{ env.IMAGE_TAG }}"
          ALEPH_PATH=$(pwd)

          sed "s/APP_NAME/${{ env.APP_NAME }}/g" \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/app-template/app-template.yaml > \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml

          sed "s/CREATE_HOOK/${{ env.CREATE_HOOK  }}/g" \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml > \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp && \
            mv $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml

          sed "s/NAMESPACE/${{ env.NAMESPACE }}/g" \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml > \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp && \
            mv $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml

          sed "s/NODE_IMAGE/$PR_IMAGE/g" \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml > \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp && \
            mv $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml.temp \
            $ALEPH_PATH/aleph-apps/argocd/overlays/devnet/fe-apps/${{ env.APP_NAME }}.yaml

      - name: GIT | Commit changes to aleph-apps repository.
        uses: EndBug/add-and-commit@v9.1.1
        env:
          IMAGE_TAG:
            ${{ env.FE_IMAGETAG_PREFIX }}${{ steps.get_branch.outputs.branch_imagetag_full }}
          APP_NAME: ${{ env.FE_APP_PREFIX }}${{ steps.get_branch.outputs.branch_appname }}
        with:
          author_name: AlephZero Automation
          author_email: alephzero@10clouds.com
          message:
            "Image changed for the feature environment to:
            ${{ env.FE_ALEPHNODE_REGISTRY }}:${{ env.IMAGE_TAG }}"
          add: "*.yaml"
          cwd: "aleph-apps"

      - name: Refresh Argo and wait for the PR image deployment to be finished
        env:
          APP_NAME: ${{ env.FE_APP_PREFIX }}${{ steps.get_branch.outputs.branch_appname }}
          ARGOCD_URL: argocd.dev.azero.dev
        run: |
          ## Install argocd CLI tool
          curl -sSL -o argocd \
            https://github.com/argoproj/argo-cd/releases/download/v2.3.3/argocd-linux-amd64
          chmod +x argocd && mv argocd /usr/local/bin/

          ## Sync argo to start deployment
          /usr/local/bin/argocd app get fe-root-application --hard-refresh \
            --auth-token ${{ secrets.ARGO_SYNC_USER_TOKEN }} --server ${{ env.ARGOCD_URL }}

          ## Wait for the app to be deployed
          /usr/local/bin/argocd app wait fe-root-application \
            --auth-token ${{ secrets.ARGO_SYNC_USER_TOKEN }} --server ${{ env.ARGOCD_URL }}
          /usr/local/bin/argocd app wait ${{ env.APP_NAME }} \
            --auth-token ${{ secrets.ARGO_SYNC_USER_TOKEN }} --server ${{ env.ARGOCD_URL }}

      - name: Remove testnet deployment request label if exists
        if: contains( github.event.pull_request.labels.*.name, env.LABEL_DEPLOY)
        uses: actions-ecosystem/action-remove-labels@v1.3.0
        with:
          labels: ${{ env.LABEL_DEPLOY }}
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Remove mainnet deployment request label if exists
        if: contains( github.event.pull_request.labels.*.name, env.LABEL_DEPLOY_HOT)
        uses: actions-ecosystem/action-remove-labels@v1.3.0
        with:
          labels: ${{ env.LABEL_DEPLOY_HOT }}
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Remove destroyed label if present
        uses: actions-ecosystem/action-remove-labels@v1.3.0
        if: contains( github.event.pull_request.labels.*.name, env.LABEL_DESTROYED)
        with:
          labels: ${{ env.LABEL_DESTROYED }}
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Add label to mark that feature branch has been deployed
        uses: actions-ecosystem/action-add-labels@v1.1.0
        with:
          labels: ${{ env.LABEL_DEPLOYED }}
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Finish Feature Env Deployment
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.CI_GH_TOKEN }}
          status: ${{ job.status }}
          env: ${{ steps.get_branch.outputs.branch_name }}
          deployment_id: ${{ needs.deploy_feature_env.outputs.deployment-id }}
          # yamllint disable-line rule:line-length
          env_url: https://dev.azero.dev/?rpc=wss%3A%2F%2Fws-${{ env.FE_APP_PREFIX }}${{ steps.get_branch.outputs.branch_appname }}.dev.azero.dev#/explorer
          ref: ${{ github.head_ref }}

  destroy_feature_env:
    if: github.event.label.name == '[AZERO] DELETE-FEATURE-ENV'
    name: Destroy feature env
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Delete FE
        uses: ./.github/actions/destroy-feature-environment
        id: delete_fe
        with:
          gh-ci-token: ${{ secrets.CI_GH_TOKEN }}
          aws-access-key: ${{ secrets.AWS_DEVNET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEVNET_SECRET_ACCESS_KEY }}
          argo-sync-user-token: ${{ secrets.ARGO_SYNC_USER_TOKEN }}

      - name: Remove labels
        uses: actions-ecosystem/action-remove-labels@v1.3.0
        with:
          labels: ${{ env.LABEL_DELETE }}
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Remove "DEPLOYED" label if present
        uses: actions-ecosystem/action-remove-labels@v1.3.0
        if: contains( github.event.pull_request.labels.*.name, env.LABEL_DEPLOYED)
        with:
          labels: ${{ env.LABEL_DEPLOYED }}
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Remove "DEPLOYED-CONTRACTS" label if present
        uses: actions-ecosystem/action-remove-labels@v1.3.0
        if: contains( github.event.pull_request.labels.*.name, env.LABEL_DEPLOYED_CONTRACTS)
        with:
          labels: ${{ env.LABEL_DEPLOYED_CONTRACTS }}
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Add label to mark that feature branch has been destroyed
        uses: actions-ecosystem/action-add-labels@v1.1.0
        with:
          labels: ${{ env.LABEL_DESTROYED }}
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Deactivate deployed environment
        uses: bobheadxi/deployments@v1
        with:
          step: deactivate-env
          token: ${{ secrets.CI_GH_TOKEN }}
          env: ${{ steps.delete_fe.outputs.deployment-name }}
          desc: Environment was deleted
          debug: true

      - name: Delete environment and deployments
        uses: strumwolf/delete-deployment-environment@v2
        with:
          token: ${{ secrets.CI_GH_TOKEN }}
          environment: ${{ steps.delete_fe.outputs.deployment-name }}

  destroy_feature_env_on_close:
    if: >
      github.event.action == 'closed' &&
      !contains(github.event.pull_request.labels.*.name, 'DESTROYED') &&
      contains(github.event.pull_request.labels.*.name, 'DEPLOYED')
    name: Destroy feature env when PR closed
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Delete FE
        uses: ./.github/actions/destroy-feature-environment
        id: delete_fe
        with:
          gh-ci-token: ${{ secrets.CI_GH_TOKEN }}
          aws-access-key: ${{ secrets.AWS_DEVNET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEVNET_SECRET_ACCESS_KEY }}
          argo-sync-user-token: ${{ secrets.ARGO_SYNC_USER_TOKEN }}

      - name: Remove labels
        uses: actions-ecosystem/action-remove-labels@v1.3.0
        with:
          labels: ${{ env.LABEL_DELETE }}
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Remove "DEPLOYED" label if present
        uses: actions-ecosystem/action-remove-labels@v1.3.0
        if: contains( github.event.pull_request.labels.*.name, env.LABEL_DEPLOYED)
        with:
          labels: ${{ env.LABEL_DEPLOYED }}
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Remove "DEPLOYED-CONTRACTS" label if present
        uses: actions-ecosystem/action-remove-labels@v1.3.0
        if: contains( github.event.pull_request.labels.*.name, env.LABEL_DEPLOYED_CONTRACTS)
        with:
          labels: ${{ env.LABEL_DEPLOYED_CONTRACTS }}
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Add label to mark that feature branch has been destroyed
        uses: actions-ecosystem/action-add-labels@v1.1.0
        with:
          labels: ${{ env.LABEL_DESTROYED }}
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Deactivate deployed environment
        uses: bobheadxi/deployments@v1
        with:
          step: deactivate-env
          token: ${{ secrets.CI_GH_TOKEN }}
          env: ${{ steps.delete_fe.outputs.deployment-name }}
          desc: Environment was deleted
          debug: true

      - name: Delete environment and deployments
        uses: strumwolf/delete-deployment-environment@v2
        with:
          token: ${{ secrets.CI_GH_TOKEN }}
          environment: ${{ steps.delete_fe.outputs.deployment-name }}
