---
name: Check excluded packages

on:
  pull_request:
    paths:
      - 'flooder/**'
      - 'e2e-tests/**'
      - 'aleph-client/**'
      - 'fork-off/**'
      - 'bin/cliain/**'
      - 'benches/**'
      - 'contracts/**'
      # TODO this package needs to be moved to /bin
      - 'scripts/synthetic-network/synthetic-link/**'
      - .github/workflows/check-excluded-packages.yml

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    name: Check excluded packages
    runs-on: self-hosted
    env:
      CARGO_INCREMENTAL: 0
      RUSTC_WRAPPER: sccache
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1

      - name: Read excluded packages from Cargo.toml
        id: read_excluded
        uses: SebRollen/toml-action@v1.0.0
        with:
          file: 'Cargo.toml'
          field: 'workspace.exclude'

      - name: Format output
        id: format_output
        run: |
          packages="$(echo ${{ steps.read_excluded.outputs.value }} \
          | sed 's/[][,]/ /g' | sed 's/\s\+/\n/g' | sed '/^$/d')"
          targets="$(echo "$packages" | sed -r 's/[A-Za-z0-9_/-]+/&\/target\//g')"

          packages="${packages//$'\n'/'%0A'}"
          targets="${targets//$'\n'/'%0A'}"

          echo "::set-output name=packages::$packages"
          echo "::set-output name=targets::$targets"

      - name: Check excluded packages
        env:
          RUSTC_WRAPPER: ""
          RUSTC_WORKSPACE_WRAPPER: sccache
        run: |
          packages="${{ steps.format_output.outputs.packages }}"
          for p in ${packages[@]}
          do
            # skip checking the contracts for now
            if [ $p = "contracts/adder" ] || [ $p = "contracts/poseidon_host_bench" ]
            then
              continue
            fi
            echo "Checking package $p..."
            pushd "$p"
            rustup component add clippy rustfmt
            rustup target add wasm32-unknown-unknown
            cargo fmt --all --check
            cargo clippy -- --no-deps -D warnings
            popd
          done

      - name: Install nono
        run: cargo install cargo-nono

      - name: Assert that packages are compatible with no-std
        run: |
          packages=("baby-liminal-extension" "poseidon" "relations")
          for p in ${packages[@]}
          do
            echo "Checking package $p..."
            pushd "$p"
            cargo nono check --no-default-features
            popd
          done
